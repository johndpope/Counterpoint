//
//  LastFMController.m
//  Counterpoint
//
//  Created by Rebecca Henderson on 2/12/14.
//  Copyright (c) 2014 Beckasaurus. All rights reserved.
//

#import "LastFMController.h"
#import "NSString+NSString_MD5.h"
#import "CPTrack.h"

const NSString* lastFMApiKey = @"529e672da2679864b9e59207d6c9b711";
const NSString* lastFMSecretKey = @"66b4a8a2adf1334f5956f66757919996";

typedef NS_ENUM (NSInteger, LastFMConnectionStage)
{
	LastFMConnectionStageRequestMobileSession,
	LastFMConnectionStageScrobbleTrack
};

@interface LastFMController ()

@property (readwrite, strong) NSString* authenticationToken;
@property (readwrite) NSInteger requestStage;
@property (nonatomic, retain) NSString* sessionResponse;
@property (nonatomic, retain) NSString* scrobbleResponse;
@property (nonatomic, retain) NSString* sessionKey;

@end

@implementation LastFMController

-(id)init
{
	self = [super init];
	if (self)
	{
		_authenticationToken = [[NSString alloc] init];
		_sessionResponse = [[NSString alloc] init];
		_scrobbleResponse = [[NSString alloc] init];
	}
	return self;
}

-(void)scrobbleCPTrack:(CPTrack*)track
{
	/*
	 artist[i] (Required) : The artist name.
	 track[i] (Required) : The track name.
	 timestamp[i] (Required) : The time the track started playing, in UNIX timestamp format (integer number of seconds since 00:00:00, January 1st 1970 UTC). This must be in the UTC time zone.
	 album[i] (Optional) : The album name.
	 context[i] (Optional) : Sub-client version (not public, only enabled for certain API keys)
	 streamId[i] (Optional) : The stream id for this track received from the radio.getPlaylist service, if scrobbling Last.fm radio
	 chosenByUser[i] (Optional) : Set to 1 if the user chose this song, or 0 if the song was chosen by someone else (such as a radio station or recommendation service). Assumes 1 if not specified
	 trackNumber[i] (Optional) : The track number of the track on the album.
	 mbid[i] (Optional) : The MusicBrainz Track ID.
	 albumArtist[i] (Optional) : The album artist - if this differs from the track artist.
	 duration[i] (Optional) : The length of the track in seconds.
	 api_key (Required) : A Last.fm API key.
	 api_sig (Required) : A Last.fm method signature. See authentication for more information.
	 sk (Required) : A session key generated by authenticating a user via the authentication protocol.
	 */
	
	if (![[NSUserDefaults standardUserDefaults] objectForKey:@"lastfmSessionKey"])
		return;
			
	[self setScrobbleResponse:@""];
	
	NSMutableDictionary* parameterDictionary = [NSMutableDictionary dictionary];
	[parameterDictionary setObject:[track artist] forKey:@"artist"];
	[parameterDictionary setObject:[track title] forKey:@"track"];
	[parameterDictionary setObject:[track album] forKey:@"album"];
	
	NSTimeInterval duration = [[NSDate date] timeIntervalSince1970];
	duration = duration - ([[track durationMilliSeconds] intValue]/1000);
	[parameterDictionary setObject:@(roundtol(duration)) forKey:@"timestamp"];
	[parameterDictionary setObject:lastFMApiKey forKey:@"api_key"];
	[parameterDictionary setObject:[[NSUserDefaults standardUserDefaults] objectForKey:@"lastfmSessionKey"] forKey:@"sk"];
	[parameterDictionary setObject:@"track.scrobble" forKey:@"method"];
	
	[self sendRequestWithParameterDictionary:parameterDictionary requestStage:LastFMConnectionStageScrobbleTrack];
}

-(NSString*)getLastFMApiSignatureWithParameters:(NSDictionary*)parameterDictionary
{
	NSMutableString* parameterString = [NSMutableString string];
	
	NSArray* parameters = [parameterDictionary allKeys];
	NSArray* sortedParameters = [parameters sortedArrayUsingSelector:@selector(compare:)];
	
	for (NSString* parameter in sortedParameters)
	{
		[parameterString appendFormat:@"%@%@",parameter, parameterDictionary[parameter]];
	}
	
	[parameterString appendFormat:@"%@",lastFMSecretKey];
	
	return [[NSString stringWithString:parameterString] MD5String];
}

-(NSString*)getFormURLEncodedStringWithParameters:(NSDictionary*)parameterDictionary
{
	NSMutableString* parameterString = [NSMutableString string];
	
	[parameterString appendFormat:@"method=%@", parameterDictionary[@"method"]];
	NSMutableDictionary* parameterDictionaryWithoutMethod = [NSMutableDictionary dictionaryWithDictionary:parameterDictionary];
	[parameterDictionaryWithoutMethod removeObjectForKey:@"method"];
	
	for (NSString* parameter in parameterDictionaryWithoutMethod)
	{
		[parameterString appendFormat:@"&%@=%@", parameter, parameterDictionary[parameter]];
	}
	
	[parameterString appendFormat:@"&api_sig=%@&format=json", [self getLastFMApiSignatureWithParameters:parameterDictionary]];
	
	return parameterString;
}

-(void)sendRequestWithParameterDictionary:(NSDictionary*)parameterDictionary requestStage:(NSInteger)requestStage
{
	NSString *post = [self getFormURLEncodedStringWithParameters:parameterDictionary];
    NSData *postData = [post dataUsingEncoding:NSUTF8StringEncoding allowLossyConversion:YES];
    NSString *postLength = [NSString stringWithFormat:@"%lu",(unsigned long)[postData length]];
	
	NSURL* authenticationURL = [NSURL URLWithString:@"https://ws.audioscrobbler.com/2.0/"];
	
    NSMutableURLRequest *request = [[NSMutableURLRequest alloc] init];
    [request setURL:authenticationURL];
    [request setHTTPMethod:@"POST"];
    [request setValue:postLength forHTTPHeaderField:@"Content-Length"];
    [request setValue:@"application/x-www-form-urlencoded" forHTTPHeaderField:@"Content-Type"];
    [request setHTTPBody:postData];
	
	[self setRequestStage:requestStage];
	
	NSURLConnection* connection = [[NSURLConnection alloc] initWithRequest:request delegate:self];
	if (!connection)
		NSLog(@"Error sending request during stage %ld", requestStage);
}

-(void)requestMobileSession
{
	NSString* username = [[NSUserDefaults standardUserDefaults] objectForKey:@"lastfmUsername"];
	NSString* password = [[NSUserDefaults standardUserDefaults] objectForKey:@"lastfmPassword"];
	
	NSMutableDictionary* parameterDictionary = [NSMutableDictionary dictionary];
	[parameterDictionary setObject:username forKey:@"username"];
	[parameterDictionary setObject:password forKey:@"password"];
	[parameterDictionary setObject:lastFMApiKey forKey:@"api_key"];
	[parameterDictionary setObject:@"auth.getMobileSession" forKey:@"method"];
	
	[self sendRequestWithParameterDictionary:parameterDictionary requestStage:LastFMConnectionStageRequestMobileSession];
}

-(void)connection:(NSURLConnection *)connection didReceiveData:(NSData *)d
{
	if ([self requestStage] == LastFMConnectionStageRequestMobileSession)
	{
		NSString *response = [[NSString alloc] initWithData:d encoding:NSUTF8StringEncoding];
		if (response)
			[self setSessionResponse:[[self sessionResponse] stringByAppendingString:response]];
	}
	if ([self requestStage] == LastFMConnectionStageScrobbleTrack)
	{
		NSString *response = [[NSString alloc] initWithData:d encoding:NSUTF8StringEncoding];
		if (response)
			[self setScrobbleResponse:[[self sessionResponse] stringByAppendingString:response]];
	}
}

- (void)connectionDidFinishLoading:(NSURLConnection *)connection
{
	if ([self requestStage] == LastFMConnectionStageRequestMobileSession)
	{
		NSError *localerror;
        NSData *jsonData = [[self sessionResponse] dataUsingEncoding:NSUTF8StringEncoding];
        
        NSDictionary *responseDict = [NSJSONSerialization JSONObjectWithData:jsonData options:NSJSONReadingAllowFragments error:&localerror];
        if (localerror)
        {
            NSLog(@"%@",[localerror description]);
        }
        else
        {
			if(responseDict[@"error"])
				NSLog(@"%@: %@",responseDict[@"error"], responseDict[@"message"]);
			
			[[NSUserDefaults standardUserDefaults] setObject:responseDict[@"session"][@"key"] forKey:@"lastfmSessionKey"];
        }
	}
	else if ([self requestStage] == LastFMConnectionStageScrobbleTrack)
	{
		NSError *localerror;
        NSData *jsonData = [[self scrobbleResponse] dataUsingEncoding:NSUTF8StringEncoding];
        
        NSDictionary *responseDict = [NSJSONSerialization JSONObjectWithData:jsonData options:NSJSONReadingAllowFragments error:&localerror];
        if (localerror)
        {
            NSLog(@"%@",[localerror description]);
        }
        else
        {
			if(responseDict[@"error"])
				NSLog(@"%@: %@",responseDict[@"error"], responseDict[@"message"]);
        }
	}

}

@end
